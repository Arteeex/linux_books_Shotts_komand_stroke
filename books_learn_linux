Командная оболочка - это программа которая принимает команды введенные с клавиатуры и передает их операционной системе для выполнения. 

date - выводит текущую дату

df - объем свободного пространства на дисках 

free - проверить оперативную память

Новигация
pwd - выводит название текущего каталога
cd - выполняет перехов в другой каталог
ls - выводит список содержимого каталога
ls -lt
'l'- long длинный формат вывода, 't' - time - по времени изменений
--reverse - изменить порядок сортировки

cp - Копирует файлы и каталоги 
mv - перемещает или переименовывает 
mkdir - создает новые каталоги 
rm - удаляет файлы и каталоги
ln - создает жесткие и символические ссылки


. - означает рабочий каталог 
.. - означает каталог, родительский по отношению к рабочему каталогу 
less - программа для просмотра текстовых файлов

Символическая ссылка (Мягкая ссылка или симлинк) - это файл особого типа, хранящий текстовый указатель на файл или каталог.
Жеские ссылки (хард линки) - 

Групповые символы
* - любая последовательность любым символов 
? - любой один символ 
[символы] - любой один символ из указанного множества
[!символы] - Любой один символ не принадлежащей указанному множеству символов
[[:класс]] - Любой один символ принадлежащему указанному классу

Наиболее часто используемые классы символов 
[:alnum] - любой Алфавитно-цифровой символ
[:alpha] - любой алфавитный символ 
[:degit] - любой цифровой символ
[:lower] - любоя буква в нижнем регистре
[:upper] - любая буква в верхнем регистре 

Примеры использования групповых символов
* - все имена файлов
g* - Все имена файлов, начинающиеся с символа "g"
b*.txt - все имена файлов, начинающиеся с символов "b", за которым следует любое число других симоволов и заканчиваются .txt
Data??? - Все имена файлов, начинащиеся с символов "Data", за которым следуют ровно три любых символа
[abc]* Все имена файлов, начинабщиеся с символа "a", "b", или "c"
BACUP.[0-9][0-9][0-9] - все имена файлов, начинающиеся с симовлов "BACKUP." За которым следуют ровно три цифровых символа
[[:upper:]]* - Все имена файлов, начинающиеся с буквы в верхнем регистре

Цепочку дисковых блоков система присваивает тому, что называется индексным узлом (inode) 

type - сообщает как интерпретируется имя указанной команды
which - сообщает какая программа будет выполнена
help - выводит справка по встроенным командам оболочки
man - выводит страницу срравочного рукводства с описанием команды
apropos - выводит список подходящих команд
info - выводит записть из справочного руководства info с описанием команды
whatis - выводит краткое описание команды
alias - создает псевдоним для команды 

что такое команда?
Каманда может быть:
Выполняемой программой (Скомпилированные двоичные программы)
Встроенной командой, реализованной внутри самой командной оболочки (bash)
Функцией командной оболочки - миниатюрные сценарии на языке командной оболчки, встроенные в окружение.
Псевдоним(alisas) - это команда которую мы можем определить сами, сконструировав из других команд

allias foo='cd /usr; ls; cd-'

cat - объединяет файлы, читает содержимое одно или несколько файлов и копирует его в стандартный вывод
sort - сортирует строки текста
uniq -сообщает о повторяющихся строка или удаляет их
grep - находит и выводит строки, соответсвующие шаблону
-i - игнорировать регистр
-v - выводить только строки, где воспадения с шаблоном не найдено
wc -счетчик слов, число строк, число слов, и число байтов в файле, выводит число символов перевода строки, слов и байтов в каждом указанном файле "-l" только число строк
head - выводит первые строки из файла
-n - изменить колчество выводимых строк
tail - выводит последние строки из файла
-f - продолжает следить за файлом и при добавлении новых строк  выводит их
tee - читает данные со стандартного ввода и записывает в старндартный вывод и в файлы.

ls -l /bin/usr 2> /dev/null
/dev/null - это системное устройство называемое битоприемником (bit bucket) или мусорной корзиной, которое принимает любой вывод и ничего с ним не делает.
Битоприемник старое понятние в UNIX, благодаря своему универсализму широко используется в культуре unix 
echo - выводит строку текста 

umask - определение разрешений доступа к файлам по умолчанию
su - запуск командной оболочки с подстановкой идентификаторов пользователя и группы
sudo - выполнение команды от имени другого пользователя
chown - изменение владельца и группы файла
chgrp - изменение группы файла
ps - выводит список процессов, выполняющихся в текущий момент
TTY - teletype информация об управляющем терминале процесса
TIME - объем процессорного времени, потребленного процессом

top - выводит задачи
jobs - выводит список активных заданий
bg - переводит задание в фоновый режим работы
fg - переводит задание в режим работы на переднем плане
kill - посылает сигнал процессу;
killall - останавливает процессы по именам
shutdown - останавливает или перезагружает систему

Как действует процесс
В момент запуска системы ядро инициализирует выполнение нескольких собственных задач в виде процессов и запускает программу с названием init. В свою очередь init выполняет последовательность сценариев командной оболочки (/etc) называемых сценариями начальной загрузки (init scripts) который запускает в системе службы. Многие их этих служб реализованы как программы демоны (daemon programs) то есть программы, действующие в фоном режиме и выполняющие свою работы без участия пользователя. 

Принцип, по которому программа может запускать другие программы, выражается правилом:
"Родительский процесс запускает дочерний процесс"
Ядро зранит инфу обо всех процессах и для упорядочивание каждому процессу присваивается номер называется 
Идентификатором процесса (Process ID, PID) 
init - получает всегда PID 1

Состояние процессов
R - Выполняетс. Процесс выполняется или готов к выполнению.
S - Приостановлен. Процесс временно не выполняется, находится в ожидании события; Нажатие клавиши или прыбытия сетевого пакета.
D - Приостановлен без возможности прерывания. Процесс ожидает завершения операции ввода вывода, например дисковое устр.
T - остановлен. Процесс принудительно остановлен.
Z - Недействующий процесс-"зомби" Это дочерний процесс, который завершился, но не был удален родителем.
< - Высокоприоритеный процесс. С
N - Низкоприоритеный процесс.

load average (LA) - Средняя нагрузка - это число процессов ожидающих возобрановление работы: то есть число процессов в состоянии "выполняется" и совместно используеющих процессор) 3 значения - за 1 минуту за 5 минут и за 15 минут.

0.7%us - процессорного времени затрачено на выполнение пользовательских (user) процессов. Подразумевается процессы за пределами ядра.
1.0%sy - Процессорного времени затрачено на выполнение системных (system) процессов (ядра)
0.0%ni - процессорного времени затрачено на выполнение уступчивых (nice) то есть низкоприоритеных процессов
98.3%id - Процессорного времени составили простои

Запустить команду в фоновом режиме необходимо в конце добавить амперсанд &
xlogo &
jobs - проверить список запущенных в терминале заданий
При этом будет команда приглашение к вводу
Что бы вернуть процесс
fg %1
kill - не просто убивает процессы, а посылает сигнал
Сигналы - один из способов, которыми операционная система общается с программами.
Ctrl+C - Посылается сигнал Interrup - прервать
Ctrl+Z - сигнал TSTP Terminal Stop - сигнал стоп с клавиатуры

Остановка системы
halt
poweroff
reboot
shutdown 
shutdown -r now - перезагрузка системы
Другие команды управления процессами
pstree -  Выводит список процессов в виде древовидногой структуры, отражающий "родитель-потомок"
vmstat - Выводит мгновенный снимок с инфо об использовании системных ресурсов, vmstat 5
xload - с графическим интерфейсом
tload 

Часть 2 Окружение и Настройка
printenv - выводит част ьили все окружение
set - устанавливает параметры командной оболочки
export - экспортирует окружение для программ, которые будут выполняться позднее.
alias - создает псевдоним команды
Командная оболочка хранит в окружении дданные двух основных типов, эти данные хранятся в переменных окружения и в переменных командной оболочкию.
Переменные командной оболочки - это фрагменты данных, инициализируемые командой bash

Как устанавливается окружение?
Когда мы входим в систему, запускается программа basg и читает содержимое серии конфигурационных сценариев, называемых файлами запуска (starup files) Где определяется окружение по умолчанию, общее для всех пользователей. 
Сеанс командной оболочки входа (login shell session) - это сеанс на входе запрашивает имя пользователя и пароль, например, когда вход выполняется в виртуальной консоли.
Сеанс простой командной оболочки (non-login shell session) обычно начинается, когда запускается терминал в графическом окружении.
Файлы запуска для командной оболочки входа
/etc/profile - общесистемный конфигурационный сценарий, настройки из которого применяются для всех пользователей
~/.bash_profile - Личный пользовательский файл запуска. Может использоваться для расширения и/или переопределения общесистемных настроек
~/.bash_login - Если файл ~/.bash_profile присутствует в домащнем каталоге, bash пытается прочитать его
~/.profile - Используется по умолчанию в дистрибутивах на основе Debian

Файлы запуска для обычных сеанос командной оболочки
/etc/bash.bashrc - общесистемный конфигурационный сценарий, настройки из которого применяются для всех пользователей
~/.bashrc - Личный пользовательский файл запуска. Может использоваться для расширения и/или переопределения ощесистемных настроек 

Изменения произведенные в файле .bashrc не вступят в силе пока не закроете терминал и не запустите новый, потому что оболочка читает содержимое файла только в начале сеанса.
source .bashrc - принудить bash повторно прочитать измененный файлы .bashrc следующей командой  

1. Управление пакетами
Управление пакетами (package management) - это методика установки и управления программным обеспечением в  системе.

Debian (.deb) - Debian, Ubuntu, Linux Mint, Raspbian
Red Hat (.rpm) - Fedora, CentOS, Red Hat Enterprise Linux, OpenSUSE

Основной единицей программного обеспечения в системе пакетов является файл пакета.
Файл пакета - эта сжатая коллеция файлов, составляющих программный пакет. Пакет может состоять из множества программ и файлов с данными, поддерживащих программы. Помимо файлов для установки, файл пакета вклчает также метаданные с информацией о пакете, например текстовым описание пакета и его содержимого. 

Репозитории

Некоторые проекты самостоятельно создают пакеты и дистрибутивы своего программоного обеспечения, и все же большинство пакетов в наше время собирается создателяи дистрибутивов и заинтересованными третьими сторонами. Готовые пакеты помещаются в центральный репозиторий дистрибутива, где они становятся доступными для пользователей. Репозиторий может содержать тысячи пакетов, специльано собранных для дистрибутива.

Зависимости

Программы редко действуют в одиночку, чаще они полагаются на наличие других программных компонентов. Стандартные операции, такие как ввод/вывод, например выполняются процедурами, которые совместно используются многими программами. 
Современные системы управления пакетами поддерживают некоторые методы разрешения зависимостей, - это гарантирует, что после установки пакета в системе будут также установелны все его зависимости.

Высоко- и низкоуровеневые инструменты управления пакетами.
Системы управления пакетами обычно включают инструменты двух типов:
- низкоуровневые инструменты, решающие такие задачи, как установка и удаление файлов пакетов.
- высокоуровневые инструменты, выполняющие поиск в методанных и разрешение зависимостей.

Инструменты управления пакетами
На основе Debian 
dpkg - низкоуровневые инструменты
apt-get, apt, aptitube - Высокоуровневые инструменты

Fedora, Red Hat Enterprise Linux, CentOS
rpm - низкоуровневые инструменты
yum, dnf - высокоуровненвые инструменты

Поиск пакета в репозитории

Debian 
apt-get update
apt-cache search искомая_строка

Red Hat
yum search искомая_строка

Установка пакета

Debian
apt-get update
apt-get install
apt-cache install имя_пакета

Red Hat
yum install имя_пакета

Установка пакета из файла пакета
Если файл пакета загружен из источника, не являющегося репозиторием, его можно установить непосредственно(без разрешения записимостей) с использованием низкоуровневого инструмента
Debian --------- dpkg -i файл_пакета
Red Hat -------- rpm -i файл_пакета

Удаление пакетоы

Debian ------- apt-get remove имя_пакета
Red Hat ------ yum erase имя_пакета

Обновлеие пакетов из репозитория

Debian ------- apt-get update; apt-get upgrade
Red Hat ------ yum update

Список установленных пакетов

Debian ------ dpkg -l
Red Hat ----- rpm -qa

Вывод информации об установенном пакете
Если известно имя установленного пакета, с помощью команд можно получить описание пакета
Debian ------ apt-cache show имя_пакета
Red Hat ----- yum info имя_пакета

Команды индентификации принадлежности файлов
Debian ------ dpkg -S имя_файла
Red Hat ----- rom -qf имя_файла

Пример: узнать, в состав какого пакеты был устанолен файл /usr/bin/vim в системе Red Hat можно командой rpm -qf /usr/bin/vim
 
15 Устройства хранения
Linux обладает удивительными возможностями работы с устройства харнения, такими как жесткие диски, сетевые хранилища или виртуальные устройства хранения, например RAID - избыточный массив из независимых дисков и 
LVM (Logical Volume Manager - диспетчер логиеских томов)

mount - монтирует файловые системы;
umount - размонтирует файловые системы;
fsck - проверяет и восстанавливает файловые системы;
fdisk - инструмент для работы с таблицей разделов;
mkfs - создает файловые системы;
dd - выполняет запись данных блоками непосредствернно в устройство;
genisoimage(mkisoft) - создает файл образа ISO 9660
wodim(cdrecord) Записывает на оптический носитель
md5sum - вычисляет контрольную сумму MD5

Первый шаг в управлении устройствами хранения - подключение самого устройства к дереву файловой системы. Этот процесс называется монтированием и позволяет устройству учавствовать в работе операционной системы.
В файле с именем /etc/fstab(сокращенно от file system table) - таблица файловых систем, перечисляются устройства, обычно разделы жесткого диска, монтируемые на этапе загрузки.
Программа fdisk - можно изменять, удалять и создавать разделы на устройстве.
mkfs сокращено от make filesystem - создать файловую систему ПРИМЕР: sudo mkfs -t ext4 /dev/sdb1
программа fsck может не только проверять целостность, но и восстанавливать поврежденные файловые системы с той или иной степенью успеха в зависимости от масштаба повреждений.
В Unix- подобных системах восстановленные фрагменты файлов помещаются в каталог lost+found, находящийся в корне каждой файловой системы ПРИМЕР: fsck /dev/sdb1

Непосредственное перемещение данных между устройствами
Можно работать с данными в "низкоуровневой" форме
Программа dd копирует блоки данных из одного еста в другое
dd if=входной_файл of=выходной_файл [bs=размер_блока [count=число_блоков]]
dd - мощная команда, data definition (определение данных) иногда destoy disk(уничтожить диск) 
Две флешки, необходимо 2-ую сделать копию 1-ой
dd if=/dev/sdb of=/dev/sdc

Контрольная сумма - это результат экзотических математических вычислений в виде числа, представляющего содержимое целевого файла. Для вычисления используется программа md4sum ПРИМЕР: md5sum image.iso
								34e3534354bdffd343425234287aaee394e image.iso
Сети
Ping --- посылает пакеты ICMP ECHO_REQUEST узлам сети;
traceroute имя узла - выводит трассирвоку маршрута пакетов к сетевому узлу;
ip a- отображает информацию о маршрутах. устройствах, политиках маршрутизации и тунелях
netstat -ie - выводит список сетевых соединений, таблицы маршрутов, статистику,
ftp - программа передачи файлов через интернет
wget - неинтерактивный загрузчик файлов из сети
ssh - программа для входа в удаленные системы 
scp (secure copy - безопасное копирование) 
sftp

Поиск файлов
locate - выполняет поиск файлов по именам;
find - выполняет поиск файлов в иерархии каталогов;
find ~ -type d | wc -l --- Поиск каталогов и их подсчет
find ~ -type f | wc -l --- поиск только файлов и подсчет
find ~ -type f -name "*.JPD" -size +1m | wc -l
find ~ \( -type f -not -perm 0600\) -or \( -type d -not -perm 0700 \)
Предопределенные операции, поддерживаемоые командой find
-delete; -ls -print -quit
find ~ -type f -name '*.bak" -delete
xargs - конструирует команды на основе данных, полученных из стандарного ввода и выполняет их
touch - изменяет времена, ассоциированные с файлом
stat - выводит статус файла или файловой системы.

Песочница
mkdir -p playground/dir-{001..100}
touch playground/dir-{001.100}/file-{A..Z}

Архивация и резервоное копирование
Программы сжатия:
gzip - сжимает и распаковывает файлы;
bzip2 - программа поблочного сжатия файлов. Джулиана Сюарда использует иной алгаритм, более высокую степень сжатия
Программы архивировани
tar - утилита архивирования на ленту;
с - создать архив из списка файлов и\или каталогов
x - извлечь файлы из архива
r- Добавить указанный файл и\или каталог в конец архива
t - вывести список содержимого архива
zip - упаковывает - сжимает файлы
Программа синхронизации файлов:
rsync - выполняет синхронизацию файлов и каталогов с удаленной системой.

Сжатие данных - это процесс устранения избыточных данных.

Часто вместе со сжатием используется операции архивирования.
Архивирование - это процесс сбора множества файлов и упаковывание их в один большой файл.

rsync - программа синхранизирует локальные и удаленные каталоги 

Регулярные выражения

Компилирование исходного кода

команда make - утилита соврождения программ

Компиляция - это процесс трансляции исходного кода (текста программы, описывающего ее действия и написанного программистом) на низкоуровнем языке, понятный процессору

Процессеор компьютера работает на очень низком уровне, выполняя программы на языке, который называют машинным

Компиляция программ на C
	Практически во всех системах Linux испольуется один и тот же компилятор языка С с именем gcc (GNU C Compiler) написанный Ричардом Столлманом 

В большинстве случает сборка программы заключается в выполнении последовательности из двух команд:
./configure
make

./configure - это сценарий командной оболочки, поставляемый вместе с деревом исходных текстов. Его задача - проанализировать окружение сбоки.

make install - собирать пакеты и устанавливать в /usr/local/bin

Сценарий командной оболочки - это файл, содержащий последовательность команд. Командная оболочка читает этот файл и выполняет команды, как если бы они вводилить вручную в командной строке

#! - это шебанг и сообщает имя интерпретатора, который должен использоваться для выполнения следующего за ним текса сценариВ большинстве случает сборка программы заключается в выполнении последовательности из двух команд:
./configure
make

./configure - это сценарий командной оболочки, поставляемый вместе с деревом исходных текстов. Его задача - проанализировать окружение сбоки.

make install - собирать пакеты и устанавливать в /usr/local/bin

Сценарий командной оболочки - это файл, содержащий последовательность команд. Командная оболочка читает этот файл и выполняет команды, как если бы они вводилить вручную в командной строке

#! - это шебанг и сообщает имя интерпретатора, который должен использоваться для выполнения следующего за ним текса сценарияя

_EOF_ - конец файла , распространенное соглашение. и она отмечает конец встроенного текста.



